[{"kind":1,"language":"markdown","value":"# LOT Language - Model Management Documentation\r\n\r\n## 1. Overview\r\n\r\nModels in Coreflux use the LOT language syntax to define how data is processed, transformed, and published. Models take input data (triggered by specific topics), process it through expressions, constants, or transformations, and output the results to new MQTT topics.\r\n\r\nModels serve as data pipelines or virtual sensors that can enrich data from existing MQTT topics, perform computations, and publish processed results. The main objective is to contextualize and aggregate data. This can be handled by transformation and the concept behind it is abstraction. By using LOT language models, you can easily configure and maintain objects with logic at the broker level, enabling dynamic calculation , formatting , aggregation , transformation of data without the need for external services.\r\n\r\nThere are two important things to know about models, they act as recipes to create the model instance. The model instance is a 4 dimensional concept, there is a location on every model it can be a singleton one model with a set of instances genereated over time. A model that identifies only with a property like  { \"Greeting\" : \"hello World\" }, can have multiple existences over time. Inside the Broker LOT is able to distinguish every single instance in time of that singleton unit, even if it is a constant it is still an unit for LOT with it's own identification bcecause time travels foward. \r\n\r\n\r\n## 2. Model Mechanism\r\n\r\n### 2.1 Model Processing Overview\r\n\r\nModels operate as functions or pipelines triggered whenever their input topics receive new messages. When a trigger topic updates or a call to create a model instance:\r\n\r\n1. **Input Acquisition**: The model reads the defined input properties. Some properties may be constants, others may reference topics , other use expresssions. \r\n2. **Computation and Expressions**: Each property's definition can involve direct values, references to other properties, or arithmetic/conditional expressions.\r\n3. **Output Publishing**: After processing, the model publishes each property’s current value to the model's output namespace, essentially creating a set of derived topics.\r\n\r\nModels can thus aggregate or transform data from multiple inputs and produce consolidated or computed outputs.\r\n\r\n### 2.2 Properties in Models\r\n\r\nEach model consists of one or more properties defined with the `ADD` statement. A property can be:\r\n\r\n- **Directly from a Topic** (with `AS TRIGGER` or without): If `AS TRIGGER` is used, changes in that topic will cause the model to recompute and update outputs.\r\n- **A Fixed Constant**: A property can be assigned a static number or string.\r\n- **An Expression**: A property can be computed from other properties using arithmetic operations, conditional expressions (IF ... THEN ... ELSE), or timestamps.\r\n\r\n### 2.3 Topics and Unified Namespace\r\n\r\nModels can use wildcards (`+`) in their topics to dynamically handle multiple sources in a Unified Namespace (UNS). For example, if a model's output topic is `Coreflux/+/+/+/+/energy`, and it references an input topic `shellies/+/+/+/+/device/energy` as a trigger, then any `shellies/x/y/z/w/device/energy` incoming value will map to `Coreflux/x/y/z/w/energy/...` outputs.\r\n\r\n### 2.4 Constants and Expressions\r\n\r\nProperties can hold constant values or can be computed using arithmetic operations, conditional logic, or timestamps. For example:\r\n\r\n- **Constant**: `ADD \"energy_price\" WITH 3`\r\n- **Expression**: `ADD \"cost\" WITH (total_energy * energy_price)`\r\n\r\nThese capabilities allow building complex logic directly in the broker without external code.\r\n\r\n## 3. Default Behavior\r\n\r\nBy default, models do not apply any transformations unless defined. They do not alter the original incoming data but produce new topics for processed results. If a model references a topic that never updates, the model will not publish new outputs.\r\n\r\n## 4. Model Syntax\r\n\r\nModels in the LOT language follow this general syntax:\r\n\r\n```\r\nDEFINE MODEL <model_name> WITH TOPIC \"<output_base_topic>\"\r\n    ADD \"<property_name>\" WITH TOPIC \"<input_topic>\" [AS TRIGGER]\r\n    ADD \"<property_name>\" WITH <constant_value>\r\n    ADD \"<property_name>\" WITH (expression)\r\n\r\n```\r\n\r\n### 4.1 Components Explained\r\n\r\n- **DEFINE MODEL `<model_name>`**: Defines a new model with a unique `<model_name>`.\r\n- **WITH TOPIC `<output_base_topic>`**: Specifies the base output topic for the model’s computed properties.\r\n- **ADD `<property_name>` ...**: Defines a property of the model.\r\n    - **WITH TOPIC \"<input_topic>\" [AS TRIGGER]**: Indicates this property’s value comes from another MQTT topic. If `AS TRIGGER` is present, updates on this topic cause the model to recompute.\r\n    - **WITH <constant_value>**: Assigns a fixed constant value to the property.\r\n    - **WITH (expression)**: Defines a property’s value as an expression based on other properties, arithmetic, conditions, or timestamps.\r\n\r\n### 4.2 Timestamps and Conditions\r\n\r\n- **IF Conditions**:\r\n    \r\n    `ADD \"message\" WITH IF alarm == \"true\" THEN \"all ok!\" ELSE \"message has an alarm 33\"`\r\n    \r\n- **Timestamp**:\r\n    \r\n    `ADD \"timestamp\" WITH TIMESTAMP \"UTC\"`\r\n    \r\n    This can add a timestamp to your computed data in various formats (`\"UTC\"`, `\"ISO\"`, `\"UNIX-MS\"`, or `\"UNIX\"`).\r\n    \r\n\r\n## 5. Model Management Guidelines\r\n\r\nLike rules, models can be added or removed dynamically using commands published to the `$SYS/Coreflux/Command` topic.\r\n\r\n### 5.1 Add a Model: `addModel <DEFINE MODEL code>`\r\n\r\nThis command allows you to add a new model to the system. Example:\r\n\r\n```\r\n-addModel DEFINE MODEL LampEnergyCost WITH TOPIC \"Coreflux/+/+/+/+/energy\"\r\n    ADD \"total_energy\" WITH TOPIC \"shellies/+/+/+/+/device/energy\" AS TRIGGER\r\n    ADD \"energy_price\" WITH 3\r\n    ADD \"cost\" WITH (total_energy * energy_price)\r\n\r\n```\r\n\r\nIn this example:\r\n\r\n- The model is named `LampEnergyCost`.\r\n- The output base topic is `Coreflux/+/+/+/+/energy`.\r\n- `total_energy` comes from `shellies/+/+/+/+/device/energy` and triggers computations.\r\n- `energy_price` is a constant `3`.\r\n- `cost` is computed as `(total_energy * energy_price)`.\r\n\r\nWhenever a `shellies/.../device/energy` message arrives, the model computes outputs and publishes to `Coreflux/.../energy/total_energy`, `Coreflux/.../energy/energy_price`, and `Coreflux/.../energy/cost`.\r\n\r\nAnother example:\r\n\r\n```\r\n-addModel DEFINE MODEL LampEnergyCostFixed WITH TOPIC \"shellies/Coreflux/Students/Lamp/Lamp1/costs\"\r\n    ADD \"total_energy\" WITH TOPIC \"shellies/Coreflux/Students/Lamp/Lamp1/device/energy\" AS TRIGGER\r\n    ADD \"energy_price\" WITH 2\r\n    ADD \"cost\" WITH (total_energy * energy_price)\r\n\r\n```\r\n\r\nHere, the model is fixed to a specific device path without wildcards, outputting computed values to `shellies/Coreflux/Students/Lamp/Lamp1/costs/...`.\r\n\r\n### 5.2 Remove a Model: `removeModel <model_name>`\r\n\r\nThis command removes an existing model by specifying its name. Example:\r\n\r\n```\r\n-removeModel LampEnergyCost\r\n\r\n```\r\n\r\nIn this example, the model `LampEnergyCost` is removed from the system. This stops the model from processing future messages and publishing outputs.\r\n\r\n## 6. Additional Examples\r\n\r\n### 6.1 UNS Style Models\r\n\r\n```\r\nDEFINE MODEL GenericEnergyCost WITH TOPIC \"Coreflux/+/+/+/+/energy\"\r\n    ADD \"total_energy\" WITH TOPIC \"shellies/+/+/+/+/device/energy\" AS TRIGGER\r\n    ADD \"energy_price\" WITH 3\r\n    ADD \"cost\" WITH (total_energy * energy_price)\r\n\r\n```\r\n\r\nFor any device matching the `shellies/.../device/energy` pattern, this model will process data and publish to `Coreflux/.../energy/...`.\r\n\r\n### 6.2 Dynamic Model\r\n\r\nIf a system provides a JSON , we can define this as a Dynamic Model. This means we can use any given JSON it will be parsed into it's own correspondent data. \r\n\r\n```\r\nDEFINE MODEL SpecificMachineStopOrder WITH TOPIC \"company/factory/department/machine/stopOrder\"\r\n\r\n```\r\n\r\nIf a JSON payload like:\r\n\r\n```json\r\n{\r\n  \"reason\": 42,\r\n  \"stop\": true,\r\n  \"time\": \"2024-12-11T15:12:54Z\"\r\n}\r\n\r\n```\r\n\r\narrives at `company/factory/department/machine/stopOrder`, the model will break it down into:\r\n\r\n- `company/factory/department/machine/stopOrder/reason` -> 42\r\n- `company/factory/department/machine/stopOrder/stop` -> true\r\n- `company/factory/department/machine/stopOrder/time` -> \"2024-12-11T15:12:54Z\"\r\n\r\n*(Note: If you want to define additional properties or triggers, you can `ADD` them similarly.)*\r\n\r\n### 6.3 Conditional Message Models\r\n\r\n```\r\nDEFINE MODEL AlertMessage2 WITH TOPIC \"Company2/+/+/+/AlarmMessage\"\r\n    ADD \"alarm\" WITH TOPIC \"shellies2/+/+/+/device/alarm\" AS TRIGGER\r\n    ADD \"message\" WITH IF alarm == \"true\" THEN \"all ok!\" ELSE \"message has an alarm 33\"\r\n    ADD \"timestamp\" WITH TIMESTAMP \"UTC\"\r\n\r\n```\r\n\r\nWhen `alarm` triggers, the model publishes a message to `Company2/.../AlarmMessage/...` including a processed `message` and a timestamp.\r\n\r\n### 6.4 Counters and Running Totals\r\n\r\n```\r\nDEFINE MODEL ProductionCounterModel WITH TOPIC \"machine/productionCounter\"\r\n    ADD \"Value\" WITH TOPIC \"machine/signal/countPart\" AS TRIGGER\r\n    ADD \"Counter\" WITH (Counter + Value)\r\n\r\n```\r\n\r\nEach time `machine/signal/countPart` receives a new number, the model adds it to the `Counter` property, creating a running total published under `machine/productionCounter/Counter`."}]