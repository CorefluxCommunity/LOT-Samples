[{"kind":1,"language":"markdown","value":"# GET TOPIC\r\n\r\n\r\n\r\n## Sample Action\r\n\r\n\r\n"},{"kind":2,"language":"lot","value":"DEFINE ACTION TimestampSum\r\nON TOPIC \"TIMESTAMP\"\r\nDO\r\n    PUBLISH TOPIC \"TIMESTAMP_CHANGED\" WITH (GET TOPIC \"TIMESTAMP\" AS TIMESTAMP \"UTC\" + 10)"},{"kind":1,"language":"markdown","value":"### Explanation of Key Parts\r\n\r\n1. **`DEFINE ACTION FilterNumericAfterB1`**  \r\n   Declares a new LOT action named `FilterNumericAfterB1`. This action **triggers** whenever a message arrives on the **`PEMS01_Dashboard`** topic.\r\n\r\n2. **`WITH FILTER PAYLOAD USING REGEX`**  \r\n   Applies a **Regex** filter to the **payload** string. This means the action **only processes** (and publishes) content that matches the given pattern. Content that does **not** match is ignored (i.e., not published to `\"temp\"`).\r\n\r\n3. **The Regex Pattern**: `(?<=B1;)(-?\\\\d+(\\\\.\\\\d+)?;)+`\r\n\r\n   - **Lookbehind `(?<=B1;)`**: This ensures we match text that **follows** the literal `B1;`. It does not consume `B1;` itself but anchors the match position to be right after that marker.\r\n   - **`(-?\\d+(\\.\\d+)?;)`**: This part matches a numeric field in the form:\r\n     - Optional minus sign (`-?`)\r\n     - One or more digits (`\\d+`)\r\n     - Optional decimal portion (`(\\.\\d+)?`)\r\n     - A trailing semicolon (`;`)\r\n   - **`+`** after the group indicates we want **one or more** of these numeric fields in a row. For example:  \r\n     ```\r\n     -3268;-87654.30;-87654.30;-87654.30;\r\n     ```\r\n     would all be matched as a single substring.\r\n\r\nThus, every time we see something like:\r\n\r\n```\r\nB1;-3268;-87654.30;-87654.30;-87654.30;BB1_BR1;...\r\n```\r\n\r\nthe regex picks up `-3268;-87654.30;-87654.30;-87654.30;` as a **match** (or more than one match if the data is segmented differently). Each match is **published** to the `\"temp\"` topic as a separate message.\r\n\r\n### Publishing to `\"temp\"`\r\n\r\nAfter extracting the numeric fields, we **publish** them to topic `\"temp\"`. This approach isolates just the numeric sequence we want, making it easier to parse, store, or transform in subsequent steps. For instance, you might define a **Model** or another **Action** that listens to `\"temp\"`, splits the numeric fields, and populates properties like **Asset_status**, **DC_Voltage**, etc.\r\n\r\n### Why Use a Filter?\r\n\r\nIn Coreflux LOT, a **Filter** is a mechanism that **screens** or **extracts** data based on a condition (in this case, a **Regex pattern**). Filters allow you to:\r\n\r\n- **Discard** irrelevant content automatically (anything not matching the pattern).\r\n- **Avoid** writing complex code that manually finds and slices strings.\r\n- **Focus** on the exact part of the payload you need to process next.\r\n\r\n\r\n    "}]